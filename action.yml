name: 'GitFlow Automation Using PR Auto Classifier Action'
description: 'Automates GitFlow release process with version bumping and PR creation'
author: 'raultoto'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  version-files:
    description: 'Comma-separated list of files to update version in (e.g., package.json,VERSION)'
    required: false
    default: 'package.json,VERSION'

runs:
  using: 'composite'
  steps:
    - name: Setup Git
      shell: bash
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com

    - name: Get merged PR information
      shell: bash
      id: pr_info
      run: |
        PR_NUMBER=$(git log -1 --pretty=%B | grep -oP '#\K\d+')
        if [ -z "$PR_NUMBER" ]; then
          echo "No PR number found in the commit message."
          exit 1
        fi
        PR_INFO=$(curl -s -H "Authorization: token ${{ inputs.github-token }}" \
                  "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        echo "pr_title=$(echo $PR_INFO | jq -r .title)" >> $GITHUB_OUTPUT
        echo "pr_labels=$(echo $PR_INFO | jq -r '[.labels[].name] | join(",")')" >> $GITHUB_OUTPUT

    - name: Determine version bump
      shell: bash
      id: bump
      run: |
        LABELS="${{ steps.pr_info.outputs.pr_labels }}"
        if [[ $LABELS == *"major"* ]]; then
          echo "bump=major" >> $GITHUB_OUTPUT
        elif [[ $LABELS == *"minor"* ]]; then
          echo "bump=minor" >> $GITHUB_OUTPUT
        else
          echo "bump=patch" >> $GITHUB_OUTPUT
        fi

    - name: Get current version and bump
      shell: bash
      id: version
      run: |
        CURRENT_VERSION=$(git tag -l "v*" --sort=-v:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+($|-)" | head -n1)
        if [ -z "$CURRENT_VERSION" ]; then
          CURRENT_VERSION="v0.0.0"
        fi
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        VERSION_REGEX="^v([0-9]+)\.([0-9]+)\.([0-9]+)(-[0-9A-Za-z-]+)?(\+[0-9A-Za-z-]+)?$"
        if [[ $CURRENT_VERSION =~ $VERSION_REGEX ]]; then
          major="${BASH_REMATCH[1]}"
          minor="${BASH_REMATCH[2]}"
          patch="${BASH_REMATCH[3]}"
          prerelease="${BASH_REMATCH[4]}"
          buildmetadata="${BASH_REMATCH[5]}"
        else
          echo "Error: Invalid version format"
          exit 1
        fi
        
        case "${{ steps.bump.outputs.bump }}" in
          major)
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          minor)
            minor=$((minor + 1))
            patch=0
            ;;
          patch)
            patch=$((patch + 1))
            ;;
        esac
        
        NEW_VERSION="v$major.$minor.$patch$prerelease$buildmetadata"
        echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Create and push release branch
      shell: bash
      run: |
        NEW_VERSION=${{ steps.version.outputs.new }}
        git checkout -b release/$NEW_VERSION
        
        # Update version in specified files
        IFS=',' read -ra FILES <<< "${{ inputs.version-files }}"
        for file in "${FILES[@]}"; do
          if [ -f "$file" ]; then
            if [ "$file" = "package.json" ]; then
              sed -i 's/"version": ".*"/"version": "'${NEW_VERSION#v}'"/g' "$file"
            else
              echo "$NEW_VERSION" > "$file"
            fi
          fi
        done
        
        git add .
        git commit -m "Bump version to $NEW_VERSION"
        git push origin release/$NEW_VERSION

    - name: Create Pull Request to main
      shell: bash
      run: |
        NEW_VERSION=${{ steps.version.outputs.new }}
        PR_TITLE="Release $NEW_VERSION"
        PR_BODY="This PR is automatically generated to merge the release $NEW_VERSION into main.

        Changes in this release:
        ${{ steps.pr_info.outputs.pr_title }}"
        
        curl -X POST \
          -H "Authorization: token ${{ inputs.github-token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/pulls \
          -d "{
            \"title\":\"$PR_TITLE\",
            \"body\":\"$PR_BODY\",
            \"head\":\"release/$NEW_VERSION\",
            \"base\":\"main\"
          }"

    - name: Create GitHub Release
      shell: bash
      run: |
        NEW_VERSION=${{ steps.version.outputs.new }}
        curl -X POST \
          -H "Authorization: token ${{ inputs.github-token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d "{
            \"tag_name\":\"$NEW_VERSION\",
            \"name\":\"Release $NEW_VERSION\",
            \"body\":\"Changes in this release:\\n${{ steps.pr_info.outputs.pr_title }}\",
            \"draft\":false,
            \"prerelease\":false
          }"

    - name: Create Pull Request to develop
      shell: bash
      run: |
        NEW_VERSION=${{ steps.version.outputs.new }}
        PR_TITLE="Merge release $NEW_VERSION back to develop"
        PR_BODY="This PR is automatically generated to merge the release changes back into develop.

        Release: $NEW_VERSION"
        
        curl -X POST \
          -H "Authorization: token ${{ inputs.github-token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/pulls \
          -d "{
            \"title\":\"$PR_TITLE\",
            \"body\":\"$PR_BODY\",
            \"head\":\"release/$NEW_VERSION\",
            \"base\":\"develop\"
          }"

branding:
  icon: 'git-branch'
  color: 'blue' 