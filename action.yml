name: 'GitFlow Automation Using PR Auto Classifier Action'
description: 'Automates GitFlow release process with version bumping and PR creation'
author: 'raultoto'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Setup Git
      shell: bash
      run: |
        echo "::debug::Setting up git configuration"
        git config user.name github-actions
        git config user.email github-actions@github.com

    - name: Get merged PR information
      shell: bash
      id: pr_info
      run: |
        echo "::debug::Extracting PR number from commit message"
        PR_NUMBER=$(git log -1 --pretty=%B | grep -oP '#\K\d+')
        if [ -z "$PR_NUMBER" ]; then
          echo "::error::No PR number found in the commit message."
          exit 1
        fi
        echo "::debug::Found PR number: $PR_NUMBER"
        
        echo "::debug::Fetching PR information from GitHub API"
        PR_INFO=$(curl -s -H "Authorization: token ${{ inputs.github-token }}" \
                  "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
        
        if [ "$(echo "$PR_INFO" | jq -r '.message')" = "Not Found" ]; then
          echo "::error::PR not found or API request failed"
          exit 1
        fi
        
        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        echo "pr_title=$(echo $PR_INFO | jq -r .title)" >> $GITHUB_OUTPUT
        echo "pr_labels=$(echo $PR_INFO | jq -r '[.labels[].name] | join(",")')" >> $GITHUB_OUTPUT

    - name: Determine version bump
      shell: bash
      id: bump
      run: |
        LABELS="${{ steps.pr_info.outputs.pr_labels }}"
        echo "::debug::Processing PR labels: $LABELS"
        if [[ $LABELS == *"major"* ]]; then
          echo "bump=major" >> $GITHUB_OUTPUT
        elif [[ $LABELS == *"minor"* ]]; then
          echo "bump=minor" >> $GITHUB_OUTPUT
        else
          echo "bump=patch" >> $GITHUB_OUTPUT
        fi

    - name: Get current version and bump
      shell: bash
      id: version
      run: |
        echo "::debug::Getting latest version tag"
        CURRENT_VERSION=$(git tag -l "v*" --sort=-v:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+($|-)" | head -n1)
        if [ -z "$CURRENT_VERSION" ]; then
          CURRENT_VERSION="v0.0.0"
        fi
        echo "::debug::Current version: $CURRENT_VERSION"
        
        VERSION_REGEX="^v([0-9]+)\.([0-9]+)\.([0-9]+)(-[0-9A-Za-z-]+)?(\+[0-9A-Za-z-]+)?$"
        if [[ $CURRENT_VERSION =~ $VERSION_REGEX ]]; then
          major="${BASH_REMATCH[1]}"
          minor="${BASH_REMATCH[2]}"
          patch="${BASH_REMATCH[3]}"
          prerelease="${BASH_REMATCH[4]}"
          buildmetadata="${BASH_REMATCH[5]}"
        else
          echo "::error::Invalid version format"
          exit 1
        fi
        
        case "${{ steps.bump.outputs.bump }}" in
          major)
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          minor)
            minor=$((minor + 1))
            patch=0
            ;;
          patch)
            patch=$((patch + 1))
            ;;
        esac
        
        NEW_VERSION="v$major.$minor.$patch$prerelease$buildmetadata"
        echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Create Release Branch and Tag
      shell: bash
      run: |
        NEW_VERSION=${{ steps.version.outputs.new }}
        echo "::debug::Creating release for version $NEW_VERSION"
        
        # Get the current commit SHA
        COMMIT_SHA=$(git rev-parse HEAD)
        echo "::debug::Current commit SHA: $COMMIT_SHA"
        
        # Create tag directly on the current commit
        echo "::debug::Creating tag $NEW_VERSION"
        git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
        git push origin "$NEW_VERSION"
        
        # Create release branch from the current commit
        echo "::debug::Creating release branch"
        git branch "release/$NEW_VERSION" "$COMMIT_SHA"
        git push origin "release/$NEW_VERSION"

    - name: Create GitHub Release
      shell: bash
      run: |
        NEW_VERSION=${{ steps.version.outputs.new }}
        echo "::debug::Creating GitHub Release"
        
        # Create the release using the GitHub API
        RELEASE_RESPONSE=$(curl -s -X POST \
          -H "Authorization: token ${{ inputs.github-token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/releases" \
          -d "{
            \"tag_name\": \"$NEW_VERSION\",
            \"target_commitish\": \"$(git rev-parse HEAD)\",
            \"name\": \"Release $NEW_VERSION\",
            \"body\": \"Changes in this release:\\n${{ steps.pr_info.outputs.pr_title }}\",
            \"draft\": false,
            \"prerelease\": false
          }")
        
        echo "::debug::Release response: $RELEASE_RESPONSE"
        
        if [ "$(echo "$RELEASE_RESPONSE" | jq -r '.id')" = "null" ]; then
          echo "::error::Failed to create release: $(echo "$RELEASE_RESPONSE" | jq -r '.message')"
          exit 1
        fi

    

branding:
  icon: 'git-branch'
  color: 'blue' 
